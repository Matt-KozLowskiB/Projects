using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AbstractVInterface

{
    abstract class Shape                                //Abstract classes must declare abstract methods with 'abstract' keyword
    {
        public abstract double surfaceArea();
    }
    abstract class WaveForm                             //Abstract classes may contain fields, declare variables, and contain functional public methods
    {
        public int x = 3;
        public double soundspeed = 340.29;
        public abstract double wavelength();
        public string toString()
        {
            return String.Format("Wavelength is equal to wavespeed divided by it's frequency.  In the case of sound, wavespeed is {0}", soundspeed);
        }
    }

    public interface Sound                            //Interfaces contain only abstract methods; since any method is assumed to be abstract,
    {                                                 //it is not necessary to declare the methods with 'abstract' keyword 
        double wavelength();
        public double frequency;                      //Interfaces cannot contain fields, declare variables- error returned if attempted
      /*string toString()                               Nor may an interface contain a defined method or body- error generated if attempted
        {
            return String.Format("Wavelength is equal to wavespeed divided by it's frequency.  In the case of sound, wavespeed is {0}", soundspeed);
        } */
    }
    public interface Solid
    {
        double mass();
    }
    class Aqua : Sound, Solid                         //A class may be derived from multiple interfaces
    {
        private double frequency;
        public double vSound = 340.29;
        private double weight;
        public double gravAcc = 9.807;
        public double wavelength()
        {
            return vSound/frequency;
        }
        public double mass()
        {
            return weight / gravAcc;
        }
    }
    class bullet : Shape, Solid, WaveForm                          //A class may be derived from 1 abstract class and multiple interfaces
    {                                                              //but cannot derive from more than 1 abstract class
        public double pi = 3.14;                                   //All abstract methods within Interface or Abstract class must be implemented by derivative class
        private double rad;
        private double height;
        private double weight;
        public double gravAcc = 9.807;
)
        public override double surfaceArea()                       //abstract method inherited from abstract class must be overridden using 'override' keyword
        {
            return 2*(pi*Math.Pow(rad, 2)) +( 2*pi*rad*height);
        }
        public double mass()                                       //abstract method inherited from an interface need not be overridden
        {
            return weight / gravAcc;
        }
    }
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































    public interface Wave
    {
        int saying = 5;                                  //returns error; interfaces may not contain fields
        double wavelength();
        string toString()                                //returns error. Interfaces may not contain concrete methods
        {
            return String.Format("ouch {0}", saying)
        }
    }
    class Program
    { 
    
        static void Main(string[] args)
        {
            fart Stank = new fart();
            Console.WriteLine(Stank.toString());
            Console.Read();
        }
    }
}
